# This file is managed by SMG AutoConf. Changes will be overwritten
<%@ val node_name: String %>
<%@ val node_host: String = "" %>
<%@ val port: Int = 6379 %>
<%@ val password: String = "" %>
<%@ val redis_cli: String = "redis-cli" %>
<%@ val redis_name: String = "redis" %>
<%@ val redis_title: String = "Redis" %>
<%@ val commandstats: Boolean = true %>
<%@ val timeout: Int = 10 %>
<%@ val id_prefix: String = "host." %>
<%@ val title_prefix: String = "Host " %>
<%@ val interval: Int = 60 %>
<%@ val rra: String = "" %>
<%@ val pre_fetch: String = "" %>
<%@ val parent_index: String = "" %>
<%@ val notify_fail: String = "" %>
<%@ val desc: String = "" %>
<%@ val add_ping: Boolean = false %>
<%@ val ping_timeout: Int = 5 %>
<%@ val extra_labels: Map[String,String] = Map() %>

<% //@ val smgConfigService: com.smule.smg.config.SMGConfigService
%>
<% //@ val smgLogger: com.smule.smg.core.SMGLoggerApi = null
%>
<%
  import com.smule.smg.core.SMGCmd

  def runCmd(cmd: String): List[String] = {
    SMGCmd(cmd).run()
  }

  val myExtraLabels = Map("node_name" -> node_name, "ac_template" -> "redis-info") ++ extra_labels

  val myHost = if (node_host.isBlank) node_name else node_host
  val passOpt = if (password.isBlank) "" else s"-a ${password}"
  val redisCliCmd = s"${redis_cli} -h ${myHost} -p ${port} ${passOpt}"
  val redisInfoCmd = s"${redisCliCmd} info"
  val redisInfoCommandstatsCmd = s"${redisCliCmd} info commandstats"
  val infoData = runCmd(redisInfoCmd)
  val commandstatsData = if (commandstats)
    runCmd(redisInfoCommandstatsCmd)
  else List()
  val redisDbs = infoData.filter(_.startsWith("db")).map(_.split(":", 2)(0))
  val myRedisName = if (redis_name == "") "" else s".${redis_name}"
  val idName = s"${id_prefix}${node_name}${myRedisName}"
  val myRedisTitle = if (redis_title == "") "" else s" ${redis_title}"
  val titleName= s"${title_prefix}${node_name}${myRedisTitle}"
  val redisInfoPf = s"${idName}.info"
  val redisInfoParsePf = s"${idName}.info.parse"
  var topLevelPf = pre_fetch

%>

# Top-level index
<%
  render("shared/_index.yml.ssp", Map(
  "id" -> s"${idName}",
  "px" -> s"${idName}.",
  "title" -> s"${titleName} - all",
  "parent" -> parent_index,
  "desc" -> desc
  ))

  render("shared/_index.yml.ssp", Map(
  "id" -> s"${idName}.grouped",
  "px" -> s"${idName}.",
  "title" -> s"${titleName} - grouped by stat_group label",
  "parent" -> idName,
  "gb" -> "GB_OBJLBLS",
  "gbp" -> "stat_group",
  "agg_op" -> "GROUP",
  "rows" -> 50
  ))

  if (add_ping){
%>

# Top-level ping command
<%
    topLevelPf = s"${idName}.ping"
    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> topLevelPf,
    "command" ->  s"ping -W 2 -n -c 1 $node_host > /dev/null || ping -W 2 -n -c 1 $node_host /dev/null",
    "desc" -> s"Check that host $node_name is up",
    "pass_data" -> false,
    "ignorets" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> pre_fetch,
    "timeout" -> ping_timeout
    ))
  } // if (add_ping)
%>

# redis info command
<%
  render("shared/_pre_fetch.yml.ssp", Map(
  "id" -> redisInfoPf,
  "command" ->  redisInfoCmd,
  "desc" -> s"Check that redis $node_name:$port is up and fetch info",
  "pass_data" -> true,
  "ignorets" -> false,
  "notify_fail" -> notify_fail,
  "pre_fetch" -> topLevelPf,
  "timeout" -> timeout
  ))

%>

# parse redis info data (treated as k/v pairs)
<%
  render("shared/_pre_fetch.yml.ssp", Map(
  "id" -> redisInfoParsePf,
  "command" ->  ":cc kv parse -d :",
  "desc" -> s"Parse redis info data from $node_name:$port, k/v pairs separated by :",
  "pass_data" -> true,
  "ignorets" -> false,
  "notify_fail" -> notify_fail,
  "pre_fetch" -> redisInfoPf,
  "timeout" -> timeout
  ))

  case class InfoStat(name: String, rrdType: String, label: String,
                      mu: Option[String], extraLabels: Map[String,String] = Map()) {
    val varDef: Map[String, String] =
      Map( "label" -> label) ++ (if (mu.isDefined) Map( "mu" -> mu.get) else Map())
    val labels: Map[String,String] = Map("stat" -> name, "stat_group" -> name) ++ extraLabels
  }

  val infoStats = Seq(
    InfoStat("connected_clients", "GAUGE", "clients", None),
    InfoStat("total_connections_received","DERIVE", "connections", Some("conns/sec")),
    InfoStat("total_commands_processed","DERIVE", "connections", Some("cmd/sec")),
    InfoStat("used_memory", "GAUGE", "mem", Some("B")),
    InfoStat("used_memory_lua", "GAUGE", "used_memory_lua", Some("B")),
    InfoStat("rejected_connections", "DERIVE", "connections", Some("conns/sec")),

    InfoStat("expired_keys", "DERIVE", "expired", Some("keys/sec"), Map("stat_group" -> "expired_evicted")),
    InfoStat("evicted_keys", "DERIVE", "evicted", Some("keys/sec"), Map("stat_group" -> "expired_evicted")),

    InfoStat("keyspace_hits", "DERIVE", "hits", Some("hits/sec"), Map("stat_group" -> "keyspace_hitmiss")),
    InfoStat("keyspace_misses", "DERIVE", "misses", Some("misses/sec"), Map("stat_group" -> "keyspace_hitmiss")),

    InfoStat("total_reads_processed", "DERIVE", "reads", Some("reads/sec"), Map("stat_group" -> "read_writes")),
    InfoStat("total_writes_processed", "DERIVE", "writes", Some("writes/sec"), Map("stat_group" -> "read_writes")),

    InfoStat("total_net_input_bytes", "DERIVE", "input_bytes", Some("B/s"), Map("stat_group" -> "net_io")),
    InfoStat("total_net_output_bytes", "DERIVE", "output_bytes", Some("B/s"), Map("stat_group" -> "net_io")),

    InfoStat("blocked_clients", "GAUGE", "", None),
    InfoStat("io_threads_active", "GAUGE", "", None),

    InfoStat("allocator_frag_ratio", "GAUGE", "", None, Map("stat_group" -> "mem_ratios")),
    InfoStat("allocator_rss_ratio", "GAUGE", "", None, Map("stat_group" -> "mem_ratios")),
    InfoStat("rss_overhead_ratio", "GAUGE", "", None, Map("stat_group" -> "mem_ratios")),
    InfoStat("mem_fragmentation_ratio", "GAUGE", "", None, Map("stat_group" -> "mem_ratios")),

    InfoStat("rdb_changes_since_last_save", "GAUGE", "", None)
  )

  for (stat <- infoStats) {
%>

# redis stat <%= stat.name %>
<%
    render("shared/_rrd_object.yml.ssp", Map(
    "id" -> s"${idName}.${stat.name}",
    "pre_fetch" -> redisInfoParsePf,
    "command" ->  s":cc kv get -d 0 ${stat.name}",
    "title" -> s"${titleName} - ${stat.name}",
    "notify_fail" -> notify_fail,
    "rrd_type" -> stat.rrdType,
    "rra" -> rra,
    //"rrd_init_source" -> rrdInitSrc,
    "interval" -> interval,
    "vars" -> Seq(stat.varDef),
    "object_labels" -> (myExtraLabels ++ stat.labels)
    ))
  } // for (stat <- infoStats1)

  val keyspaceProps = Seq(
    InfoStat("keys", "GAUGE", "keys", None),
    InfoStat("expires", "GAUGE", "expires", None),
    InfoStat("avg_ttl", "GAUGE", "avg_ttl", Some("ms"))
  )

  for (db <- redisDbs) {
    val keyspacePfId = s"${redisInfoParsePf}.${db}.keyspace"
    val keyspaceCsvPfId = s"${redisInfoParsePf}.${db}.keyspace.csv"
%>

# database <%= db %> keyspace
# get the keyspace data as csv
<%
    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> keyspacePfId,
    "command" ->  s":cc kv get -d keys=0,expires=0,avg_ttl=0 ${db}",
    "desc" -> s"Get redis keyspace data for ${db} from $node_name:$port",
    "pass_data" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> redisInfoParsePf,
    "timeout" -> timeout
    ))

    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> keyspaceCsvPfId,
    "command" ->  ":cc csv parse -nh",
    "desc" -> s"Parse redis keyspace data for ${db} from $node_name:$port as csv",
    "pass_data" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> keyspacePfId,
    "timeout" -> timeout
    ))

    for ((stat,ix) <- keyspaceProps.zipWithIndex) {
      val keyspaceCsvGetPfId = s"${keyspaceCsvPfId}.get.${stat.name}"
%>

# database <%= db %> keyspace stat <%= stat.name %>
<%
      render("shared/_pre_fetch.yml.ssp", Map(
      "id" -> keyspaceCsvGetPfId,
      "command" ->  s":cc csv get 0=~.* ${ix}",
      "desc" -> s"Get redis keyspace data for ${db} from $node_name:$port as csv cell",
      "pass_data" -> true,
      "notify_fail" -> notify_fail,
      "pre_fetch" -> keyspaceCsvPfId,
      "timeout" -> timeout
      ))

      render("shared/_rrd_object.yml.ssp", Map(
      "id" -> s"${idName}.${db}.keyspace.${stat.name}",
      "pre_fetch" -> keyspaceCsvGetPfId,
      "command" ->  s":cc kv pget -d 0 ${stat.name}",
      "title" -> s"${titleName} - ${db} keyspace ${stat.name}",
      "notify_fail" -> notify_fail,
      "rrd_type" -> stat.rrdType,
      "rra" -> rra,
      //"rrd_init_source" -> rrdInitSrc,
      "interval" -> interval,
      "vars" -> Seq(stat.varDef),
      "object_labels" -> (myExtraLabels ++ stat.labels ++ Map("stat" -> s"${db}-${stat.name}"))
      ))
    } // for ((stat,ix) <- keyspaceProps.zipWithIndex)
  } // for (db <- redisDbs)

  if (commandstats) {
%>

## commandstats
<%
    val cmdStatName = s"${idName}.cmdstat"
    render("shared/_index.yml.ssp", Map(
    "id" -> s"${cmdStatName}",
    "px" -> s"${cmdStatName}_",
    "title" -> s"${titleName} - commandstats",
    "parent" -> idName,
    "cols" -> 3,
    "rows" -> 60
    ))

    render("shared/_index.yml.ssp", Map(
    "id" -> s"${cmdStatName}.grouped",
    "px" -> s"${cmdStatName}_",
    "title" -> s"${titleName} - commandstats grouped by stat_group",
    "parent" -> cmdStatName,
    "gb" -> "GB_OBJLBLS",
    "gbp" -> "stat_group",
    "agg_op" -> "GROUP",
    "rows" -> 50
    ))

%>

# redis info commandstats command
<%
    val redisInfoCmdStatsPf = s"${redisInfoPf}.commandstats"
    val redisInfoCmdStatsParsePf = s"${redisInfoPf}.commandstats.parse"

    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> redisInfoCmdStatsPf,
    "command" ->  redisInfoCommandstatsCmd,
    "desc" -> s"Fetch redis cmdstats from $node_name:$port via info commandstats",
    "pass_data" -> true,
    "ignore_data" -> true,
    "ignorets" -> false,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> redisInfoPf,
    "timeout" -> timeout
    ))

    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> redisInfoCmdStatsParsePf,
    "command" ->  ":cc kv parse -d :",
    "desc" -> s"Parse redis info commandstats data from $node_name:$port, k/v pairs separated by :",
    "pass_data" -> true,
    "ignorets" -> false,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> redisInfoCmdStatsPf,
    "timeout" -> timeout
    ))
  //  cmdstat_info:calls=14,usec=453,usec_per_call=32.36
  //  cmdstat_get:calls=2,usec=28,usec_per_call=14.00
  //  cmdstat_keys:calls=4,usec=93,usec_per_call=23.25
  //  cmdstat_select:calls=6,usec=8,usec_per_call=1.33
  //  cmdstat_set:calls=1,usec=3,usec_per_call=3.00
    val allCommands = commandstatsData.flatMap { ln =>
      if (ln.startsWith("cmdstat_"))
        Some(ln.split(":",2)(0).split("_", 2)(1))
      else
        None
    }.sorted

    val cmdProps = Seq(
      InfoStat("calls", "DERIVE", "calls", Some("calls/sec")),
      InfoStat("usec", "DERIVE", "usec", Some("usec/sec")),
      InfoStat("usec_per_call", "GAUGE", "usec_per_call", Some("us"))
    )

    for (cmd <- allCommands) {
      val cmdPfId = s"${redisInfoCmdStatsParsePf}.cmdstat_${cmd}.get"
      val cmdCsvPfId = s"${redisInfoCmdStatsParsePf}.cmdstat_${cmd}.csv"
%>

# redis info commandstats cmdstat_<%= cmd %>
<%
      render("shared/_index.yml.ssp", Map(
      "id" -> s"${cmdStatName}_${cmd}",
      "px" -> s"${cmdStatName}_${cmd}.",
      "title" -> s"${titleName} - commandstats for ${cmd}",
      "parent" -> cmdStatName,
      "cols" -> 3
      ))

      render("shared/_pre_fetch.yml.ssp", Map(
      "id" -> cmdPfId,
      "command" ->  s":cc kv get -d calls=0,usec=0,usec_per_call=0 cmdstat_${cmd}",
      "desc" -> s"Get redis commandstats data for ${cmd} from $node_name:$port",
      "pass_data" -> true,
      "notify_fail" -> notify_fail,
      "pre_fetch" -> redisInfoCmdStatsParsePf,
      "timeout" -> timeout
      ))

      render("shared/_pre_fetch.yml.ssp", Map(
      "id" -> cmdCsvPfId,
      "command" ->  ":cc csv parse -nh",
      "desc" -> s"Parse redis commandstats data for ${cmd} from $node_name:$port as csv",
      "pass_data" -> true,
      "notify_fail" -> notify_fail,
      "pre_fetch" -> cmdPfId,
      "timeout" -> timeout
      ))

      for ((stat,ix) <- cmdProps.zipWithIndex) {
        val cmdCsvGetPfId = s"${cmdCsvPfId}.get.${stat.name}"
%>

# redis info commandstats cmdstat_<%= cmd %> stat <%= stat.name %>
<%
        render("shared/_pre_fetch.yml.ssp", Map(
        "id" -> cmdCsvGetPfId,
        "command" ->  s":cc csv get 0=~.* ${ix}",
        "desc" -> s"Get redis commandstats data for ${cmd} from $node_name:$port as csv cell",
        "pass_data" -> true,
        "notify_fail" -> notify_fail,
        "pre_fetch" -> cmdCsvPfId,
        "timeout" -> timeout
        ))

        render("shared/_rrd_object.yml.ssp", Map(
        "id" -> s"${cmdStatName}_${cmd}.${stat.name}",
        "pre_fetch" -> cmdCsvGetPfId,
        "command" ->  s":cc kv pget -d 0 ${stat.name}",
        "title" -> s"${titleName} - commandstats ${cmd} ${stat.name}",
        "notify_fail" -> notify_fail,
        "rrd_type" -> stat.rrdType,
        "rra" -> rra,
        //"rrd_init_source" -> rrdInitSrc,
        "interval" -> interval,
        "vars" -> Seq(stat.varDef),
        "object_labels" -> (myExtraLabels ++ stat.labels ++ Map("stat" -> s"${cmd}-${stat.name}"))
        ))

      } // for ((stat,ix) <- cmdProps.zipWithIndex)
    } // for (cmd <- allCommands)
  } // if (commandstats)
%>
