### shared/_rrd_agg_object.yml.ssp
<%@ val id: String %>
<%@ val rrd_type: String %>
<%@ val op: String %><%
// either ids or filter must be supplied
%><%@ val ids: Seq[String] = Seq() %>
<%@ val flt: Option[com.smule.smg.core.SMGFilter] = None %>
<%@ val vars: Seq[Map[String,Object]] = Seq() %>
<%@ val title: String = "" %>
<%@ val interval: Int = 60 %>
<%@ val pre_fetch: String = "" %>
<%@ val notify_fail: String = "" %>
<%@ val object_labels: Map[String,Object] = Map() %>
<%@ val stack: Boolean = false %>
<%@ val data_delay: Int = 0 %>
<%@ val rrd_init_source: String = "" %>
<%@ val rra: String = "" %>
<%@ val rra_def: String = "" %>
<%@ val sanitize_labels: Boolean = true %>
<%
  val rraDef = if (rra == "") rra_def else rra
  val myObjectLabels = Map("ac_type" -> "rrd_agg") ++ object_labels
%>
# id = +<%= id %>
- id: +<%= id %>
  interval: <%= interval.toString %>
  op: '<%= op %>'
<% if (ids.nonEmpty) { %>
  ids:
<% for (oid <- ids) { %>
    - <%= oid %>
<%
    }
  }
%>
<% if (flt.nonEmpty) { %>
  filter:
<%
  render("_smg_filter.yml.ssp", Map(
    "flt" -> flt.get,
    "ident_spaces" -> 4
    ))
  } // flt.nonEmpty
%>
  rrd_type: <%= rrd_type %>
<% if (title != "") { %>
  title: '<%= title.replaceAll("'","''") %>'
<% } %>
<% if (stack) { %>
  stack: true
<% } %>
<% if (rrd_init_source != "") { %>
  rrd_init_source: '<%= rrd_init_source %>'
<% } %>
<% if (rraDef != "") { %>
  rra: '<%= rraDef %>'
<% } %>
<% if (data_delay != 0) { %>
  data_delay: <%= data_delay.toString %>
<% } %>
<%
  if (vars.nonEmpty) {
    render("_object_vars.yml.ssp", Map(
      "vars" -> vars,
      "ident_spaces" -> 2))
  }

  render("_object_labels.yml.ssp", Map(
    "object_labels" -> myObjectLabels,
    "sanitize_labels" -> sanitize_labels,
    "ident_spaces" -> 2))
%>
