# This file is managed by SMG AutoConf. Changes will be overwritten
<%
  // Configure this with a command like this:
  // command: 'curl -sS -f http://%node_host%:%port%/metrics'
  // runtime_data: true
%>
<%@ val command: String %>
<%@ val node_name: String %>
<%@ val port: Int = 0 %>
<%@ val data: Object %>
<%@ val id_prefix: String = "host." %>
<%@ val title_prefix: String = "Host " %>
<%@ val interval: Int = 60 %>
<%@ val metrics_name: String = "metrics" %>
<%@ val metrics_hname: String = "Metrics" %>
<%@ val metrics_timeout: Int = 15 %>
<%@ val rra_def: String = "" %>
<%@ val pre_fetch: String = "" %>
<%@ val parent_index: String = "" %>
<%@ val notify_fail: String = "" %>
<%@ val desc: String = "" %>
<%@ val max_auto_var_label_len: Int = 20 %>
<%@ val max_uid_len: Int = 180 %>
<%@ val labels_in_uids: Boolean = false %>
<%@ val extra_labels: Map[String,String] = Map() %>
<%@ val sum_count_group_bucket_labels: Seq[String] = Seq("le", "quantile") %>
<%@ val filter_rxx: String = "" %>
<%@ val regex_replaces: Seq[String] = Seq() %>
<%@ val fail_on_missing: Boolean = false %>
<%
  import scala.collection.mutable.ListBuffer

  // Some helper functions
  def varLabelFromStatName(statName: String): String = {
    val varLabelUnderscore = statName.split('_').last
    val varLabelDot = statName.split('.').last
    val varLabelAuto = if (varLabelDot.nonEmpty && varLabelDot.length <= varLabelUnderscore.length)
      varLabelDot
    else if (varLabelUnderscore.nonEmpty)
      varLabelUnderscore
    else
      ""
    if (varLabelAuto.nonEmpty && varLabelAuto.lengthCompare(max_auto_var_label_len) <= 0)
      varLabelAuto
    else
      "value"
  }

  def matchesRxx(s: String) = (filter_rxx != "") && s.matches(filter_rxx)
  def matchesFilter(s: String) = !matchesRxx(s)

  val myRegexReplaces = regex_replaces.map { s =>
    val arr = s.split("=", 2)
    (arr(0), arr.lift(1).getOrElse(""))
  }
  val processRegexReplaces = (s: String) => {
    var ret = s
    myRegexReplaces.foreach { t =>
      ret = ret.replaceAll(t._1, t._2)
    }
    ret
  }

  def isSumCountName(name: String): Boolean = name.endsWith("_sum") || name.endsWith("_count")

  val myPortDesc = if (port == 0) "" else s" (port $port)"
  val getErrParam = if (fail_on_missing) ":err " else ""

  // parse /metrics output
  var needParse = true
  val groups = if (data.isInstanceOf[com.smule.smgplugins.scrape.OpenMetricsResultData]) {
    needParse = false
    data.asInstanceOf[com.smule.smgplugins.scrape.OpenMetricsResultData].stats
  } else if (data.isInstanceOf[java.lang.String])
    com.smule.smg.openmetrics.OpenMetricsParser.parseText(data.asInstanceOf[java.lang.String], None)
  else
    com.smule.smg.openmetrics.OpenMetricsParser.parseText(data.asInstanceOf[Seq[String]].mkString("\n"), None)

  val parsed = groups.flatMap { grp => grp.rows.map { row => (grp, row) } }
  val parsedByUid = parsed.groupBy(_._2.labelUid)
  val fullPrefix = s"${id_prefix}${node_name}.${metrics_name}"
  val fullTitlePrefix = s"${title_prefix} ${metrics_hname}"
%>
### pre fetch command(s)
<%
  if (needParse){
    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> s"${fullPrefix}.get",
    "command" -> command,
    "desc" -> s"Get ${metrics_hname} from ${node_name}${myPortDesc}",
    "pass_data" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> pre_fetch,
    "timeout" -> metrics_timeout
    ))
  }
%>

<%
  val pfDescPx = if (needParse) "Parse" else "Retrieve and parse"
  val pfPf = if (needParse) s"${fullPrefix}.get" else pre_fetch
  val pfCmd = if (needParse) ":scrape parse" else command
  render("shared/_pre_fetch.yml.ssp", Map(
  "id" -> s"${fullPrefix}.parse",
  "command" -> pfCmd,
  "desc" -> s"${pfDescPx} ${metrics_hname} from ${node_name}${myPortDesc}",
  "pass_data" -> true,
  "notify_fail" -> notify_fail,
  "pre_fetch" -> pfPf,
  "timeout" -> metrics_timeout
)) %>

# the top-level index
<% render("shared/_index.yml.ssp", Map(
  "id" -> s"${fullPrefix}.all",
  "px" -> s"${fullPrefix}.",
  "title" -> s"${title_prefix} ${node_name} ${metrics_hname} - all",
  "parent" -> parent_index
))
%>

#for (grp <- groups)
<%
  val isSumCountGroup = grp.metaType.contains("histogram") || grp.metaType.contains("summary")
  val rrdType =  grp.metaType.getOrElse("gauge") match {
    case "gauge" => "GAUGE"
    case "counter" => "DDERIVE" // XXX DDERIVE also covers float number counters
    case "summary" => "GAUGE"
    case "histogram" => "DDERIVE"
    case "untyped" => "GAUGE" // TODO ?
    case x => "GAUGE"
  }
%>
############################################################
# grp <%= grp.metaKey.getOrElse(grp.rows.headOption.map(_.name).getOrElse("None")) %>  - isSumCountGroup=<%= isSumCountGroup %>
#if (isSumCountGroup)
############################################################
<% render("shared/_openmetrics_sumcount.yml.ssp", Map(
  "grp" -> grp,
  "rrdType" -> rrdType,
  "id_prefix" -> s"${fullPrefix}",
  "pre_fetch" -> s"${fullPrefix}.parse",
  "processRegexReplacesObj" -> processRegexReplaces,
  "matchesFilterObj" -> matchesFilter _,
  "parent_index" -> s"${fullPrefix}.all",
  "labels_in_uids" ->  labels_in_uids,
  "max_uid_len" -> max_uid_len,
  "title_prefix" -> fullTitlePrefix,
  "interval" -> interval,
  "rra_def" -> rra_def,
  "extra_labels" -> extra_labels,
  "sum_count_group_bucket_labels" -> sum_count_group_bucket_labels,
  "notify_fail" -> notify_fail,
  "fail_on_missing" -> fail_on_missing
))
%>
## END if (isSumCountGroup == true)
#else
############################################################
#if (grp.rows.nonEmpty)
<%
  val numRows = grp.rows.size
  val hasMany = numRows > 1
  val rawBaseUid = grp.metaKey.getOrElse(grp.rows.head.name)
  val baseUid = processRegexReplaces(rawBaseUid)
  val canHaveLabelUids = grp.rows.forall(_.labelUid.lengthCompare(max_uid_len) <= 0)
  var grpNonEmpty = false
%>
#for (rowt <- grp.rows.zipWithIndex)
<%
  val row = rowt._1
  val ix = rowt._2
  val rawIdxSuffix = if (labels_in_uids) {
    if (canHaveLabelUids)
      row.labelUid
    else
      com.smule.smg.openmetrics.OpenMetricsParser.groupIndexUid(rawBaseUid, Some(ix))
    } else if (hasMany)
      com.smule.smg.openmetrics.OpenMetricsParser.groupIndexUid(rawBaseUid, Some(ix))
    else {
      com.smule.smg.openmetrics.OpenMetricsParser.safeUid(rawBaseUid)
    }
  val idxSuffix = processRegexReplaces(rawIdxSuffix)
  val titleGroupIndexId = if (hasMany) Some(ix) else None
//  val ouid = idPrefix + idxSuffix // TODO processRegexReplaces(idxSuffix, scrapeTargetConf.regexReplaces)
  val scrapeGetParams = row.labelUid
  val varLabel = varLabelFromStatName(row.name)
  val varMu = if (rrdType == "GAUGE") "" else s"$varLabel/sec"
%>
#if (matchesFilter(idxSuffix))
<%
  grpNonEmpty = true
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${fullPrefix}.${idxSuffix}",
  "pre_fetch" -> s"${fullPrefix}.parse",
  "command" -> s":scrape get ${getErrParam}${scrapeGetParams}",
  "title" -> s"${grp.title(fullTitlePrefix, idxSuffix, titleGroupIndexId)}",
  "notify_fail" -> notify_fail,
  "rrd_type" -> rrdType,
  "rra_def" -> rra_def,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> varLabel) ++ (if (varMu != "") Map("varMu" -> varMu) else Map())
  ),
  "object_labels" -> (row.labelsAsMap ++ extra_labels)
  ))
%>
# filterMatches(idxSuffix) END
#end
# rowt loop END
#end
#if (grpNonEmpty)
<%
  val filterDotSuffix = if (hasMany) "." else ""
  render("shared/_index.yml.ssp", Map(
  "id" -> s"${fullPrefix}.${baseUid}",
  "px" -> s"${fullPrefix}.${baseUid}${filterDotSuffix}",
  "title" -> s"${grp.title(fullTitlePrefix, baseUid, None)}",
  "parent" -> s"${fullPrefix}.all",
  "desc" -> grp.metaHelp.getOrElse("")
  ))
%>
# grpNonEmpty END
#end
# grp.rows.nonEmpty END
#end
# END isSumCountGroup == false
#end
# grp <- groups loop END
#end
# End of generated output
