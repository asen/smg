# This file is managed by SMG AutoConf. Changes will be overwritten
<%
  // Configure this with a command like this:
  // command: 'curl -sS -f http://%node_host%:%port%/metrics'
  // runtime_data: true
%>
<%@ val command: String %>
<%@ val node_name: String %>
<%@ val node_host: String %>
<%@ val data: Object %>
<%@ val id_prefix: String = "host." %>
<%@ val title_prefix: String = "Host " %>
<%@ val interval: Int = 60 %>
<%@ val rra: String = "" %>
<%@ val rra_def: String = "" %>
<%@ val pre_fetch: String = "" %>
<%@ val parent_index: String = "" %>
<%@ val notify_fail: String = "" %>
<%@ val desc: String = "" %>
<%@ val add_ping: Boolean = true %>
<%@ val ping_timeout: Int = 5 %>
<%@ val metrics_timeout: Int = 10 %>
<%@ val extra_labels: Map[String,String] = Map() %>
<%@ val net_dvc_filters: Seq[String] = Seq(
  "node_network_up=1",
  "node_network_address_assign_type=0"
) %>
<%@ val net_dvc_filters_oldv: Seq[String] = Seq(
  "device=~^(eth|en).*"
) %>
<%@ val fs_label_filters: Seq[String] = Seq(
  "device!=tmpfs",
  "device!=sunrpc",
  "mountpoint!=/boot"
) %>
<%@ val netio_max: String = "" %>

<%@ val smgLogger: com.smule.smg.core.SMGLoggerApi = null %>

<%
  val rraDef = if (rra == "") rra_def else rra

  def myLogEx(t: Throwable, msg: String): Unit = {
    if (smgLogger != null) {
      smgLogger.ex(t, msg)
    }
  }

  // parse /metrics output
  var needParse = true
  val groups = try {
    data match {
    case ord: com.smule.smgplugins.scrape.OpenMetricsResultData => {
      needParse = false
      ord.stats
    }
    case s: String =>  com.smule.smg.openmetrics.OpenMetricsParser.parseText(s, None)
    case x => com.smule.smg.openmetrics.OpenMetricsParser.parseText(x.asInstanceOf[Seq[String]].mkString("\n"), None)
    }
  } catch { case t: Throwable =>
    myLogEx(t, s"Error converting data to OpenMetrics: data=${data.toString.take(768)} message=${t.getMessage}")
    throw t
  }
  val parsed = groups.flatMap { grp =>
    grp.rows.map { row => (grp, row) }
  }
  val parsedByUid = parsed.groupBy(_._2.labelUid)

  val myExtraLabels = Map("node_name" -> node_name, "ac_template" -> "node-exporter") ++ extra_labels

  // XXX older node exporter reports some stats without _total/_bytes suffixes
  var totalSuffix = "_total"
  var bytesSuffix = "_bytes"
  var secondsSuffix = "_seconds"
  if (parsedByUid.contains("node_intr")) {
    totalSuffix = ""
    bytesSuffix = ""
    secondsSuffix = ""
  }

  val hasSwap = parsedByUid.contains(s"node_memory_SwapTotal${bytesSuffix}")

  val cpuUsageComponents = Seq("user", "nice", "system", "idle", "iowait", "irq", "softirq", "steal")
  val cpuSecondsPrefix = s"node_cpu${secondsSuffix}${totalSuffix}.cpu."
  val cpuIdPrefixes = scala.collection.mutable.ListBuffer[String]()

  val diskReadBytesPrefix = s"node_disk_read${bytesSuffix}${totalSuffix}.device."
  val diskDevices = scala.collection.mutable.ListBuffer[String]()

  val networkDeviceIdPrefix = "node_network_device_id.device."
  val networkDevices = scala.collection.mutable.ListBuffer[String]()
  val networkDeviceFilters = net_dvc_filters.map { s =>
    val arr = s.split("=", 2)
    (s"${arr(0)}.device.", scala.util.Try(arr(1).toDouble).getOrElse(Double.NaN))
  }

  val networkDeviceIdPrefixOldv = "node_network_receive_bytes.device."
  val networkDevicesOldv = scala.collection.mutable.ListBuffer[String]()
  val networkDeviceFiltersOldv = net_dvc_filters_oldv.flatMap { s =>
    com.smule.smg.core.SMGFilterLabels.parse(s)
  }

  val fsAvailBytesPrefix = s"node_filesystem_avail${bytesSuffix}.device."
  val fsLabelFilters = fs_label_filters.flatMap { s =>
    com.smule.smg.core.SMGFilterLabels.parse(s)
  }
  val fsMounts = scala.collection.mutable.ListBuffer[(String,String)]()

  parsed.foreach { case (grp,oms) =>
    if (oms.labelUid.startsWith(cpuSecondsPrefix)){
      val cpuId = oms.labelUid.stripPrefix(cpuSecondsPrefix).split("\\.",2)(0)
      val cip = s"${cpuSecondsPrefix}${cpuId}."
      if (!cpuIdPrefixes.contains(cip))
        cpuIdPrefixes += cip
    } else if (oms.labelUid.startsWith(diskReadBytesPrefix)) {
      diskDevices += oms.labelUid.stripPrefix(diskReadBytesPrefix)
    } else if (oms.labelUid.startsWith(networkDeviceIdPrefix)) {
      val filterDevice = { dvc: String =>
        dvc != "lo" && networkDeviceFilters.forall { case (px, v) =>
          parsedByUid.get(px + dvc).flatMap(t => t.headOption.map(_._2.value)).getOrElse(Double.NaN) == v
        }
      }
      val dvcName = oms.labelUid.stripPrefix(networkDeviceIdPrefix)
      if (filterDevice(dvcName))
        networkDevices += dvcName
    } else if (oms.labelUid.startsWith(networkDeviceIdPrefixOldv)) {
        val lblsMap: Map[String,String] = oms.labels.toMap
        if (networkDeviceFiltersOldv.forall(_.matches(lblsMap)) && lblsMap.contains("device")) {
          networkDevicesOldv += lblsMap("device")
        }
    } else if (oms.labelUid.startsWith(fsAvailBytesPrefix)) {
      val lblsMap: Map[String,String] = oms.labels.toMap
      if (fsLabelFilters.forall(_.matches(lblsMap)) && lblsMap.contains("mountpoint"))
        fsMounts += Tuple2(lblsMap("mountpoint"), oms.labelUid.stripPrefix(fsAvailBytesPrefix))
    }
  }

// TODO

// node_edac_***

//  # HELP node_entropy_available_bits Bits of available entropy.
//  # TYPE node_entropy_available_bits gauge
//  node_entropy_available_bits 3934

//  # HELP node_filefd_allocated File descriptor statistics: allocated.
//  # TYPE node_filefd_allocated gauge
//  node_filefd_allocated 3424
//  # HELP node_filefd_maximum File descriptor statistics: maximum.
//  # TYPE node_filefd_maximum gauge
//  node_filefd_maximum 3.272613e+06

//  # HELP node_forks_total Total number of forks.
//  # TYPE node_forks_total counter
//  node_forks_total 4.04954479e+08

// node_hwmon_
// node_ipvs_
// node_md_
// node_nf_conntrack

//  # HELP node_procs_blocked Number of processes blocked waiting for I/O to complete.
//  # TYPE node_procs_blocked gauge
//  node_procs_blocked 0
//  # HELP node_procs_running Number of processes in runnable state.
//  # TYPE node_procs_running gauge
//  node_procs_running 6

// node_sockstat

// # HELP node_time_seconds System time in seconds since epoch (1970).
//  # TYPE node_time_seconds gauge
//  node_time_seconds 1.618591963281852e+09

// node_timex

// node_vmstat
//  So what does these esoteric names mean .Here is a reference on what these terms mean.
//
//  pgpgin      –  Number of kilobytes the system has paged in from disk per second.
//  pgpgout     –  Number of kilobytes the system has paged out to disk per second.
//  pswpin      –  Number of kilobytes the system has swapped in from disk per second.
//  pswpout     –  Number of kilobytes the system has swapped out to disk per second.
//
//  The following statistics are only available by kernels from 2.6.
//  pgfault     –  Number of page faults the system has made per second (minor + major).
//  pgmajfault  –  Number of major faults per second the system required loading a memory page from disk.
//

  val idName = s"${id_prefix}${node_name}"
  val titleName = s"${title_prefix}${node_name}"

  var myPf = pre_fetch

  if (add_ping) {
%>
# Top-level ping command
<%
    myPf = s"${idName}.ping"
    render("shared/_pre_fetch.yml.ssp", Map(
    "id" -> myPf,
    "command" ->  s"ping -W 2 -n -c 1 $node_host > /dev/null || ping -W 2 -n -c 1 $node_host /dev/null",
    "desc" -> s"Check that host $node_name is up",
    "pass_data" -> false,
    "ignorets" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> pre_fetch,
    "timeout" -> ping_timeout
    ))
  }

  var metricsPf = if (needParse) s"${idName}.metrics_get" else s"${idName}.metrics"
%>

# Metrics command
<%
  render("shared/_pre_fetch.yml.ssp", Map(
  "id" ->  metricsPf,
  "command" -> command,
  "desc" -> s"Fetch system metrics from $node_name",
  "pass_data" -> true,
  "notify_fail" -> notify_fail,
  "pre_fetch" -> myPf,
  "timeout" -> metrics_timeout
  ))

  if (needParse) {
    val myId = s"${idName}.metrics"
%>

# Metrics parse command
<%
  render("shared/_pre_fetch.yml.ssp", Map(
    "id" ->  myId,
    "command" -> ":scrape parse",
    "desc" -> s"Parse system metrics from $node_name",
    "pass_data" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> metricsPf,
    "timeout" -> metrics_timeout
    ))
    metricsPf = myId
  }

  // The "Node" index
%>

# The Node Index (excluding details)
<%
  render("shared/_index.yml.ssp", Map(
  "id" -> s"${idName}",
  "px" -> s"${idName}.",
  "rxx" -> "\\._dtl\\.",
  "title" -> s"${titleName}",
  "parent" -> parent_index,
  "desc" -> desc
  ))
%>

# Another Node Index (including details)
<%
  render("shared/_index.yml.ssp", Map(
  "id" -> s"${idName}.w_dtl",
  "px" -> s"${idName}.",
  "title" -> s"${titleName} - including device/core details",
  "parent" -> idName
  ))
%>

# Another Node Index (including details)
<%
  render("shared/_index.yml.ssp", Map(
  "id" -> s"${idName}.netstat",
  "px" -> s"${idName}.netstat.",
  "title" -> s"${titleName} - Network (netstat) stats - only",
  "parent" -> idName
  ))
%>

# Stats below

#### Sysload
<%
  //The actual objects below
  //sysload
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.sysload",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_load1,node_load5,node_load15",
  "title" -> s"${titleName} - Load average over 1/5/15 min periods",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "GAUGE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "sl1min"),
    Map( "label" -> "sl5min"),
    Map( "label" -> "sl15min")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "sysload"))
  ))
%>

#### Cpu usage - aggregate from all cores
<%
  //an aggregate object, components defined later below
  render("shared/_rrd_agg_object.yml.ssp", Map(
  "id" -> s"${idName}._agg.cpu",
  "ids" -> cpuIdPrefixes.indices.toSeq.map{ coreId => s"${idName}._dtl.core${coreId}.cpu"},
  "op" -> "SUM",
  "title" -> s"${titleName} - CPU usage (all cores)",
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  "stack" -> true,
  "interval" -> interval,
  "vars" -> cpuUsageComponents.map { stat =>
    Map( "label" -> stat, "mu" -> "%", "lt" -> "AREA", "cdef" -> "$ds,100,*")
  },
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "cpu", "cpu_core" -> "all"))
  ))
%>

<%
  //a graph object, subset of cpu usages
  // "user", "nice", "system", "idle", "iowait", "irq", "softirq", "steal"
  render("shared/_graph_object.yml.ssp", Map(
  "id" -> s"${idName}._agg.cpu_user_system",
  "ref" -> s"${idName}._agg.cpu",
  "title" -> s"${titleName} - CPU usage - user/system only (all cores)",
  "cdef_vars" -> Seq(
    Map("cdef" -> "$ds0", "label" -> "user", "mu" -> "%"),
    Map("cdef" -> "$ds2", "label" -> "system", "mu" -> "%")
  ),
  // "gv" -> Seq(0, 2),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "cpu_user_system", "cpu_core" -> "all"))
  ))
%>

<%
  //a graph object, subset of cpu usages
  render("shared/_graph_object.yml.ssp", Map(
  "id" -> s"${idName}._agg.cpu_nice_wait",
  "ref" -> s"${idName}._agg.cpu",
  "title" -> s"${titleName} - CPU usage - nice/wait only (all cores)",
  "cdef_vars" -> Seq(
    Map("cdef" -> "$ds1", "label" -> "nice", "mu" -> "%"),
    Map("cdef" -> "$ds4", "label" -> "iowait", "mu" -> "%")
  ),
  // "gv" -> Seq(1, 4),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "cpu_nice_wait", "cpu_core" -> "all"))
  ))
%>

#### Interrupts/context switches
<%
 render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.intctx",
  "pre_fetch" -> metricsPf,
  "command" -> s":scrape get node_intr${totalSuffix},node_context_switches${totalSuffix}",
  "title" -> s"${titleName} - Interrupts/context switches",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "ints"),
    Map( "label" -> "ctxs")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "intctx"))
  ))
%>

#### Memory usage
<%
  val memProps = Seq("MemTotal", "MemFree", "Cached", "SReclaimable", "Buffers")
  val memScapeGetParams = memProps.map(s => s"node_memory_${s}${bytesSuffix}").mkString(",")
  val memValsPf = s"${metricsPf}.mem.values"
  render("shared/_pre_fetch.yml.ssp", Map(
  "id" ->  memValsPf,
  "command" -> s":scrape get ${memScapeGetParams}",
  "desc" -> s"Parse memory-related stats from metrics on $node_name",
  "pass_data" -> true,
  "notify_fail" -> notify_fail,
  "pre_fetch" -> metricsPf,
  "timeout" -> metrics_timeout
  ))
%>

# meminfo details
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.meminfo.detail",
  "pre_fetch" -> memValsPf,
  "command" -> "-", // cat
  "title" -> s"${titleName} - /proc/meminfo details",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "GAUGE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
  Map( "label" -> "MemTotal", "mu" -> "B"),
  Map( "label" -> "MemFree", "mu" -> "B"),
  Map( "label" -> "Cached", "mu" -> "B"),
  Map( "label" -> "SReclaimable", "mu" -> "B"),
  Map( "label" -> "Buffers", "mu" -> "B")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "meminfo_details"))
  ))
%>

# meminfo percused
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.meminfo.percused",
  "pre_fetch" -> memValsPf,
  // ((ds0 - ds1 - ds2 - ds3 - ds4) * 100) / ds0
  "command" -> ":cc rpn $ds0,-$ds1,+,-$ds2,+,-$ds3,+,-$ds4,+,100,*,$ds0,/",
  "title" -> s"${titleName} - /proc/meminfo Used % (total - free - cached - reclaimable - buffers ) * 100 / total",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "GAUGE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "used percent", "mu" -> "%", "maxy" -> "100" )
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "meminfo.percused"))
  ))

  if (hasSwap) {
    val swapProps = Seq("SwapTotal", "SwapFree", "SwapCached")
    val swapScapeGetParams = swapProps.map(s => s"node_memory_${s}${bytesSuffix}").mkString(",")
%>

#### Swap usage
<%
    render("shared/_rrd_object.yml.ssp", Map(
    "id" -> s"${idName}.swapinfo",
    "pre_fetch" -> metricsPf,
    "command" -> s":scrape get ${swapScapeGetParams}",
    "title" -> s"${titleName} - Swap info",
    "notify_fail" -> notify_fail,
    "rrd_type" -> "GAUGE",
    "rra" -> rraDef,
    //"rrd_init_source" -> rrdInitSrc,
    "interval" -> interval,
    "vars" -> Seq(
      Map( "label" -> "SwapTotal", "mu" -> "B"),
      Map( "label" -> "SwapFree", "mu" -> "B"),
      Map( "label" -> "SwapCached", "mu" -> "B")
    ),
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "swapinfo"))
    ))
  } // if (hasSwap)
%>

#### Disk devices - aggregate blkio
<%
  if (diskDevices.length > 0) {
    //an aggregate object, components defined later below
    render("shared/_rrd_agg_object.yml.ssp", Map(
    "id" -> s"${idName}._agg.blkio",
    "ids" -> diskDevices.toSeq.map{ dvc => s"${idName}._dtl.${dvc}.blkio"},
    "op" -> "SUM",
    "title" -> s"${titleName} - Block Device I/O (all devices)",
    "rrd_type" -> "DDERIVE",
    "rra" -> rraDef,
    "interval" -> interval,
    "vars" -> Seq(
      Map( "label" -> "wrtn", "mu" -> "B/s"),
      Map( "label" -> "read", "mu" -> "B/s")
    ),
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "blkio", "dvc" -> "all"))
    ))
  } // (diskDevices.length > 0)
%>

#### Disk space usage
<%
  for (fsmT <- fsMounts) {
    val mountp = fsmT._1
    val idsx = fsmT._2
    val drvsafe = idsx.split("\\.").last
    //  "node_filesystem_avail_bytes",
    //  "node_filesystem_size_bytes",
    //  "node_filesystem_files",
    //  "node_filesystem_files_free"
    val fsScapeGetParams = Seq(s"avail${bytesSuffix}", s"size${bytesSuffix}", "files_free", "files").map { s =>
    s"node_filesystem_${s}.device.${idsx}"
    }.mkString(",")
    val dvcPfId = s"${metricsPf}.fs.${drvsafe}.values"
%>

# fs <%= mountp %> -> <%= idsx %>
<%
    render("shared/_pre_fetch.yml.ssp", Map(
    "id" ->  dvcPfId,
    "command" -> s":scrape get ${fsScapeGetParams}",
    "desc" -> s"Parse filesystem-related stats for ${mountp} from metrics on $node_name",
    "pass_data" -> true,
    "notify_fail" -> notify_fail,
    "pre_fetch" -> metricsPf,
    "timeout" -> metrics_timeout
    ))
%>

<%
    render("shared/_rrd_object.yml.ssp", Map(
    "id" -> s"${idName}.fs.percused.${drvsafe}",
    "pre_fetch" -> dvcPfId,
    //  ((ds1 - ds0) * 100) / ds1
    //  ((ds3 - ds2) * 100) / ds3
    "command" -> ":cc rpn $ds1,$ds0,-,100,*,$ds1,/ $ds3,$ds2,-,100,*,$ds3,/",
    "title" -> s"${titleName} - Disk usage ${mountp} filesystem",
    "notify_fail" -> notify_fail,
    "rrd_type" -> "GAUGE",
    "rra" -> rraDef,
    //"rrd_init_source" -> rrdInitSrc,
    "interval" -> interval,
    "vars" -> Seq(
      Map( "label" -> "used bytes", "mu" -> "%", "maxy" -> "100"),
      Map( "label" -> "used inodes", "mu" -> "%", "maxy" -> "100")
    ),
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "fs.percused", "dvc" -> "mountp"))
    ))
  } // (fsmT <- fsMounts)
%>

#### Network I/O traffic - all devices
<%
  val myNetDevices = if (networkDevices.nonEmpty) networkDevices else networkDevicesOldv

  if (myNetDevices.length > 0) {
    render("shared/_rrd_agg_object.yml.ssp", Map(
    "id" -> s"${idName}._agg.netio",
    "ids" -> myNetDevices.toSeq.map{ dvc => s"${idName}._dtl.${dvc}.netio"},
    "op" -> "SUM",
    "title" -> s"${titleName} - Network Device I/O (all devices)",
    "rrd_type" -> "DDERIVE",
    "rra" -> rraDef,
    "interval" -> interval,
    "vars" -> Seq(
      Map( "label" -> "in", "mu" -> "b/s", "cdef" -> "$ds,8,*" ),
      Map( "label" -> "out", "mu" -> "b/s", "cdef" -> "$ds,8,*")
    ),
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "netio", "dvc" -> "all"))
    ))
  } //if (myNetDevices.length > 0)
%>

#### Network Stats
# netstat.tcp.newconn
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.tcp.newconn",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Tcp_PassiveOpens,node_netstat_Tcp_ActiveOpens",
  "title" -> s"${titleName} - Network New TCP Connections",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "in", "mu" -> "c/s"),
    Map( "label" -> "out", "mu" -> "c/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.tcp.newconn"))
  ))
%>

# netstat.tcp.estconn
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.tcp.estconn",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Tcp_CurrEstab",
  "title" -> s"${titleName} - Network Established TCP Connectionss",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "GAUGE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
  Map( "label" -> "conns")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.tcp.estconn"))
  ))
%>

# netstat.tcp.syncookies
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.tcp.syncookies",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_TcpExt_SyncookiesRecv,node_netstat_TcpExt_SyncookiesSent,node_netstat_TcpExt_SyncookiesFailed",
  "title" -> s"${titleName} - Network TCP Syncookies Recv/Sent/Failed",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "recv", "mu" -> "ev/s"),
    Map( "label" -> "sent", "mu" -> "ev/s"),
    Map( "label" -> "failed", "mu" -> "ev/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.tcp.syncookies"))
  ))
%>

# netstat.tcp.errdropoverf
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.tcp.errdropoverf",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Tcp_InErrs,node_netstat_TcpExt_ListenDrops,node_netstat_TcpExt_ListenOverflows",
  "title" -> s"${titleName} - Network TCP InErrs/ListenDrops/ListenOverflows",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "inErrs", "mu" -> "ev/s"),
    Map( "label" -> "lsnDrop", "mu" -> "ev/s"),
    Map( "label" -> "lsnOverf", "mu" -> "ev/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.tcp.errdropoverf"))
  ))
%>

# netstat.tcp.retrans
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.tcp.retrans",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_TcpExt_TCPSynRetrans,node_netstat_Tcp_RetransSegs",
  "title" -> s"${titleName} - Network TCP SynRetrans/RetransSegs",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "synRtrn", "mu" -> "ev/s"),
    Map( "label" -> "rtrnSegs", "mu" -> "ev/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.tcp.retrans"))
  ))
%>

# netstat.udp4.datagrams
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.udp4.datagrams",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Udp_InDatagrams,node_netstat_Udp_OutDatagrams",
  "title" -> s"${titleName} - Network UDP InDatagrams/OutDatagrams",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "in", "mu" -> "dgm/s"),
    Map( "label" -> "out", "mu" -> "dgm/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.udp4.datagrams"))
  ))
%>

# netstat.udp4.errs
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.udp4.errs",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Udp_InErrors,node_netstat_UdpLite_InErrors,node_netstat_Udp_NoPorts",
  "title" -> s"${titleName} - Network UDP InErrs/LiteInErrs/NoPorts",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "inErrs", "mu" -> "ev/s"),
    Map( "label" -> "liteInErrs", "mu" -> "ev/s"),
    Map( "label" -> "noPorts", "mu" -> "ev/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.udp4.errs"))
  ))
%>

# netstat.udp6.datagrams
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.udp6.datagrams",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Udp6_InDatagrams,node_netstat_Udp6_OutDatagrams",
  "title" -> s"${titleName} - Network UDP6 InDatagrams/OutDatagrams",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
  Map( "label" -> "in", "mu" -> "dgm/s"),
  Map( "label" -> "out", "mu" -> "dgm/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.udp6.datagrams"))
  ))
%>

# netstat.udp6.errs
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.udp6.errs",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Udp6_InErrors,node_netstat_UdpLite6_InErrors,node_netstat_Udp6_NoPorts",
  "title" -> s"${titleName} - Network UDP6 InErrs/LiteInErrs/NoPorts",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "inErrs", "mu" -> "ev/s"),
    Map( "label" -> "liteInErrs", "mu" -> "ev/s"),
    Map( "label" -> "noPorts", "mu" -> "ev/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.udp6.errs"))
  ))
%>

# netstat.ipv4.octets
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.ipv4.octets",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_IpExt_InOctets,node_netstat_IpExt_OutOctets",
  "title" -> s"${titleName} - Network IPV4 I/O Octets",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "in", "mu" -> "B/s"),
    Map( "label" -> "out", "mu" -> "B/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.ipv4.octets"))
  ))
%>

# netstat.ipv6.octets
<%
  render("shared/_rrd_object.yml.ssp", Map(
  "id" -> s"${idName}.netstat.ipv6.octets",
  "pre_fetch" -> metricsPf,
  "command" -> ":scrape get node_netstat_Ip6_InOctets,node_netstat_Ip6_OutOctets",
  "title" -> s"${titleName} - Network IPV6 I/O Octets",
  "notify_fail" -> notify_fail,
  "rrd_type" -> "DDERIVE",
  "rra" -> rraDef,
  //"rrd_init_source" -> rrdInitSrc,
  "interval" -> interval,
  "vars" -> Seq(
    Map( "label" -> "in", "mu" -> "B/s"),
    Map( "label" -> "out", "mu" -> "B/s")
  ),
  "object_labels" -> (myExtraLabels ++ Map("stat" -> "netstat.ipv6.octets"))
  ))
%>


######################
#### details stats

#### CPU details
<%
  for ( t <- cpuIdPrefixes.zipWithIndex ) {
    val cpuIdPx = t._1
    val cpuIdNum = t._2
    val coreId = s"core${cpuIdNum}"

    val scrapeGetParams = cpuUsageComponents.map { cuc =>
    s"${cpuIdPx}mode.${cuc}"
    }.mkString(",")
%>

# _dtl.<%= coreId %>.cpu
<%
    render("shared/_rrd_object.yml.ssp", Map(
    "id" -> s"${idName}._dtl.${coreId}.cpu",
    "pre_fetch" -> metricsPf,
    "command" -> s":scrape get ${scrapeGetParams}",
    "title" -> s"${titleName} - CPU usage (${coreId})",
    "notify_fail" -> notify_fail,
    "rrd_type" -> "DDERIVE",
    "rra" -> rraDef,
    "stack"  -> true,
    //"rrd_init_source" -> rrdInitSrc,
    "interval" -> interval,
    "vars" -> cpuUsageComponents.map { stat =>
      Map( "label" -> stat, "mu" -> "%", "lt" -> "AREA", "cdef" -> "$ds,100,*")
    },
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "cpu", "cpu_core" -> coreId))
    ))
  } // for ( t <- cpuIdPrefixes.zipWithIndex )
%>

#### Disk devices details
<%
  for (dvc <- diskDevices) {
%>

#  _dtl.<%= dvc %>.blkio
<%
    render("shared/_rrd_object.yml.ssp", Map(
    "id" -> s"${idName}._dtl.${dvc}.blkio",
    "pre_fetch" -> metricsPf,
    "command" -> s":scrape get node_disk_written_bytes_total.device.${dvc},node_disk_read_bytes_total.device.${dvc}",
    "title" -> s"${titleName} - Block Device I/O (${dvc})",
    "notify_fail" -> notify_fail,
    "rrd_type" -> "DDERIVE",
    "rra" -> rraDef,
    //"rrd_init_source" -> rrdInitSrc,
    "interval" -> interval,
    "vars" -> Seq(
      Map( "label" -> "wrtn", "mu" -> "B/s"),
      Map( "label" -> "read", "mu" -> "B/s")
    ),
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "blkio", "dvc" -> dvc))
    ))
  } // for (dvc <- diskDevices)
%>

#### Network devices details
<%
  for (dvc <- myNetDevices) {
%>

#  _dtl.<%= dvc %>.netio
<%
    render("shared/_rrd_object.yml.ssp", Map(
    "id" -> s"${idName}._dtl.${dvc}.netio",
    "pre_fetch" -> metricsPf,
    "command" -> s":scrape get node_network_receive_bytes${totalSuffix}.device.${dvc},node_network_transmit_bytes${totalSuffix}.device.${dvc}",
    "title" -> s"${titleName} - Network Device I/O (${dvc})",
    "notify_fail" -> notify_fail,
    "rrd_type" -> "DDERIVE",
    "rra" -> rraDef,
    //"rrd_init_source" -> rrdInitSrc,
    "interval" -> interval,
    "vars" -> Seq(
      Map( "label" -> "in", "mu" -> "b/s", "cdef" -> "$ds,8,*" ),
      Map( "label" -> "out", "mu" -> "b/s", "cdef" -> "$ds,8,*")
    ),
    "object_labels" -> (myExtraLabels ++ Map("stat" -> "netio", "dvc" -> dvc))
    ))
  } // for (dvc <- myNetDevices)
%>
