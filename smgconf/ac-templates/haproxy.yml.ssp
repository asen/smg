# This file is managed by SMG AutoConf. Changes will be overwritten
<%
  // Configure this with a command like this:
  // command: "curl -sS -f 'http://%node_host%/haproxy/stats/url;csv'"
  // resolve_name: true  // assumes node_name resolves to node_host, or specify node_host
  // node_host: 1.2.3.4
  // runtime_data: true
%>
<%@ val node_name: String %>
<%@ val command: String %>
<%@ val data: Seq[String] %>
<%@ val id_prefix: String = "hap." %>
<%@ val title_prefix: String = "" %>
<%@ val interval: Int = 60 %>
<%@ val timeout: Int = 30 %>
<%@ val pre_fetch: String = "" %>
<%@ val parent_index: String = "" %>
<%@ val notify_fail: String = "" %>
<%@ val index_rows: String = "6" %>
<%@ val filter_rxx: String = "" %>

- id: <%= id_prefix %><%= node_name %>.stats.fetch
  type: $pre_fetch
  desc: "Fetch Haproxy stats over HTTP - <%= node_name %>"
  command: "<%= command %>"
  timeout: <%= timeout %>
  pass_data: true
#if (pre_fetch != "")
  pre_fetch: <%= pre_fetch %>
#end
#if (notify_fail != "")
  notify-fail: <%= notify_fail %>
#end

- id: <%= id_prefix %><%= node_name %>.stats.parse
  type: $pre_fetch
  desc: "Parse Haproxy CSV stats - <%= node_name %>"
  command: ":cc csv parse"
  pass_data: true
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.fetch
#if (notify_fail != "")
  notify-fail: <%= notify_fail %>
#end

- id: ^<%= id_prefix %><%= node_name %>
  title: "<%= title_prefix %><%= node_name %> Haproxy stats"
  px: "<%= id_prefix %><%= node_name %>."
  cols: 12
  rows: <%= index_rows %>
#if (parent_index != "")
  parent: <%= parent_index %>
#end

#for (line <- data.tail)
<%
  val arr = line.split(",")
  val px = if (arr(1) == "FRONTEND" || arr(1) == "BACKEND") "bf" else "host"
  val itm = if (px == "bf") s"${arr(0)}.${arr(1).toLowerCase}" else s"${arr(0)}.${arr(1)}"
  val itm_title = s"${arr(0)} ${arr(1)}"
  val row_matchers = s"0=${arr(0)} 1=${arr(1)}"
  // The parent item index is the backend summary index for hosts and the above ("global") parent for the rest
  val parent_index_sx = if (px == "bf") "" else s".bf.${arr(0)}.backend"
  val index_title_desc = arr(1) match {
    case "FRONTEND" => ""
    case "BACKEND" => " (summary)"
    case _ => " (backend host)"
  }
  val filterMatches = (filter_rxx == "") || (!itm.matches(filter_rxx))
%>

####################################
# node_name = <%= node_name %>
# itm = <%= itm %>
# row_matchers = <%= row_matchers %>
#if (filterMatches == false)

# SKIPPED DUE TO filterMatches

#else

#if (arr(1) == "BACKEND")
# extra index for backends - "all backend hosts" stats, suitable for grouping/filtering
- id: ^<%= id_prefix %><%= node_name %>.host.<%= itm %>
  title: "<%= title_prefix %><%= node_name %> Haproxy stats - <%= itm_title %> (all backend hosts)"
  px: "<%= id_prefix %><%= node_name %>.host.<%= arr(0) %>."
  cols: 10
  rows: <%= index_rows %>
  parent: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>

#end

- id: ^<%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>
  title: "<%= title_prefix %><%= node_name %> Haproxy stats - <%= itm_title %><%= index_title_desc %>"
  px: "<%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>."
  cols: 10
  rows: <%= index_rows %>
  parent: <%= id_prefix %><%= node_name %><%= parent_index_sx %>

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.rate
  command: ":cc csv get -e0 <%= row_matchers %> rate"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Rate"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: consec

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.stot
  command: ":cc csv get -e0 <%= row_matchers %> stot"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Sessions/sec"
  rrdType: DERIVE
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: stot
    mu: sess/sec

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.scur
  command: ":cc csv get -e0 <%= row_matchers %> scur"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Sess (scur)"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: conns

# We want to monitor on cur/limit % so graph that
# It uses a csv get pre-fetch to get the scur and slim values and then
# a rpn command to calculate %
- type: $pre_fetch
  id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.scurlimitperc.parse
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  command: ":cc csv get -e0 <%= row_matchers %> scur slim"
  pass_data: true

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.scurlimitperc
  pre_fetch: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.scurlimitperc.parse
  # ($ds0 * 100) / $ds1
  command: ":cc rpn $ds0,100,*,$ds1,/"
  title:  "<%= title_prefix %><%= node_name %> <%= itm %> Cur/Limit %"
  interval: <%= interval %>
  vars:
  - label: cur/limit perc
    mu: "%"

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.qcur
  command: ":cc csv get -e0 <%= row_matchers %> qcur"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Queue (qcur)"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: queued conns

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.rate_max
  command: ":cc csv get -e0 <%= row_matchers %> rate_max"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Rate max"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: max consec

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.scur_max
  command: ":cc csv get -e0 <%= row_matchers %> smax"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Sess (scur) max"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: max conns

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.qcur_max
  command: ":cc csv get -e0 <%= row_matchers %> qmax"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> Queue (qcur) max"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  vars:
  - label: max queued conns

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.netio
  command: ":cc csv get -e0 <%= row_matchers %> bin bout"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> In/Out traffic b/s"
  interval: <%= interval %>
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  rrdType: DERIVE
  vars:
  - label: in
    mu: "b/s"
    cdef: "$ds,8,*"
  - label: out
    mu: "b/s"
    cdef: "$ds,8,*"

# Up/Down uses a csv get pre-fetch and then map command to
# convert the string OPEN/UP values to 1 and anyhing else - 0
- type: $pre_fetch
  id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.updown.parse
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  command: ":cc csv get -e0 <%= row_matchers %> status"
  pass_data: true

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.updown
  pre_fetch: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.updown.parse
  command: ":cc map OPEN=1 UP=1 0"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> UP(1)/DOWN(0)"
  interval: <%= interval %>
  vars:
  - label: up/down

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.hrsp
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  command: ":cc csv get -e0 <%= row_matchers %> hrsp_1xx hrsp_2xx hrsp_3xx hrsp_4xx hrsp_5xx hrsp_other"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> response codes (hrsp)"
  interval: <%= interval %>
  rrd_type: DERIVE
  vars:
  - label: hrsp_1xx
    mu: rsp/sec
  - label: hrsp_2xx
    mu: rsp/sec
  - label: hrsp_3xx
    mu: rsp/sec
  - label: hrsp_4xx
    mu: rsp/sec
  - label: hrsp_5xx
    mu: rsp/sec
  - label: hrsp_other
    mu: rsp/sec

- id: <%= id_prefix %><%= node_name %>.<%= px %>.<%= itm %>.denerrwarn
  pre_fetch: <%= id_prefix %><%= node_name %>.stats.parse
  command: ":cc csv get -e0 <%= row_matchers %> dreq dresp ereq econ eresp wretr wredis"
  title: "<%= title_prefix %><%= node_name %> <%= itm_title %> denied/errors/warnings"
  interval: <%= interval %>
  rrd_type: DERIVE
  vars:
  - label: dreq
    mu: denied/sec
  - label: dresp
    mu: denied/sec
  - label: ereq
    mu: err/sec
  - label: econ
    mu: err/sec
  - label: eresp
    mu: err/sec
  - label: wretr
    mu: warn/sec
  - label: wredis
    mu: warn/sec

#end # if (filterMatches == false)

#end # for

