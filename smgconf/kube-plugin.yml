
kube:
  # XXX if changing this - make sure it is actually included by the autoconf plugin conf
  autoconf_targets_d: "/opt/smg/data/conf/autoconf.d"
#  log_skipped: false
  clusters:
#    - uid: skube-int
##      name: skube-int
#      kube_conf_file: "/etc/smg/kube-config"
##      kube_token_file: "/etc/smg/kube-token"
##      kube_url: "https://kubernetes.default.svc"
##      fetch_command: 'curl -f -sS -k -H "Authorization: Bearer `cat /etc/smg/kube-token/token`"'
#      fetch_command: ':scrape fetch :tokenf /etc/smg/kube-token/token'
#      need_parse: true # set to true if fetch_command returns strings instead of internally parsed OpenMetricsResultData
#      indexes_by_type: true # set to false to not have indexes by type
#      fetch_timeout: 10
#      cluster:
#        - template: k8s-kubectl-top
#      node_metrics:
#        - uid: node
#          proto: http
#          port_path: ":9100/metrics"
#        - template: node-exporter
#          command: 'curl -sS -f http://%node_host%:9100/metrics'
#          runtime_data: true
#          filter:
#            rxx: blah
#        - uid: kubelet
#          proto: https
#          port_path: ":10250/metrics"
##          filter:
##            rx: blah
#        - uid: cadvisor
#          proto: https
#          port_path: ":10250/metrics/cadvisor"
#      auto_confs:
#      - type: service
#        enabled: true
#        metrics_enable_annotation: prometheus.io/scrape
#        metrics_port_annotation: prometheus.io/port
#        metrics_path_annotation: prometheus.io/path
#        filter:
#          rx: blah
#        regex_replaces:
#         - filter_regex: "^go_gc"
#           regex: "^go_(gc)_(duration)"
#           replace: "go_$2_$1"
#        check_backoff: 600000
#      - type: endpoint
#      prefix_ids_with_cluster_id: false
    - include: "/etc/smg/kube-clusters.d/*.{yml,yaml}"
    - include: "/opt/smg/data/conf/kube-clusters.d/*.{yml,yaml}"
