# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /               controllers.Application.index()
GET     /s              controllers.Application.search(q: Option[String], lmt: Option[Int])
GET     /ci             controllers.Application.index()
GET     /autoindex      controllers.Application.autoindex(rt: String ?= "", el: Int ?= 1)
GET     /autoindex/     controllers.Application.autoindex(rt: String ?= "", el: Int ?= 1)
GET     /autoindex/:rt  controllers.Application.autoindex(rt: String, el: Int ?= 1)
GET     /dash           controllers.Application.dash()
POST    /dash           controllers.Application.dash()
GET     /show/:oid      controllers.Application.show(oid: String, cols: Int ?= 6, dpp: String ?= "", d95p: String ?= "", maxy: Option[String], miny: Option[String], logy: String ?= "")
GET     /fetch/:oid     controllers.Application.fetch(oid: String, r: Option[String], s: Option[String], e: Option[String], d: Boolean ?= false)
GET     /showAgg        controllers.Application.showAgg(ids:String, op:String, gb: Option[String], title: Option[String], cols: Int ?= 6, dpp: String ?= "", d95p: String ?= "", maxy: Option[String], miny: Option[String], logy: String ?= "")
POST    /showAgg        controllers.Application.showAggPost()
GET     /fetchAgg       controllers.Application.fetchAgg(ids:String, op:String, gb: Option[String], r: Option[String], s: Option[String], e: Option[String], d:Boolean ?= false)
POST    /fetchAgg       controllers.Application.fetchAggPost()
POST    /run/:interval  controllers.Application.runJob(interval: Int, id: Option[String])
POST    /reload         controllers.Application.reloadConf
GET     /reload         controllers.Application.reloadConf
GET     /user/settings       controllers.Application.userSettings()
POST    /user/settings       controllers.Application.userSettings()
GET     /monitor             controllers.Application.monitorProblems(remote: Seq[String], ms: Option[String], soft: Option[String], slncd: Option[String])
GET     /monitor/silenced    controllers.Application.monitorSilenced()
POST    /monitor/silenced    controllers.Application.monitorSilenced()
GET     /monitor/trees       controllers.Application.monitorTrees(remote: Seq[String], rx: Option[String], rxx: Option[String], ms: Option[String], hsoft: String ?= "off", hackd: String ?= "off", hslncd: String ?= "off", rid: Option[String], lmt: Option[Int], silenceAllUntil: Option[String], sticky: Option[String], stickyDesc: Option[String], curl: Option[String])
GET     /monitor/heatmap     controllers.Application.monitorHeatmap
GET     /monitor/log         controllers.Application.monitorLog(remote: Seq[String], p: Option[String], l: Option[Int], ms: Option[String], soft: Option[String], slncd: Option[String], rx: Option[String], rxx: Option[String])
GET     /monitor/runtree     controllers.Application.monitorRunTree(remote: Option[String], root: Option[String], lvls: Option[Int])

GET     /monitor/ack          controllers.Application.monitorAck(id: String, curl: String)
GET     /monitor/unack        controllers.Application.monitorUnack(id: String, curl: String)
GET     /monitor/slnc         controllers.Application.monitorSilence(id: String, slunt: String, curl: String)
GET     /monitor/unslnc       controllers.Application.monitorUnsilence(id: String, curl: String)

POST    /monitor/ackList       controllers.Application.monitorAckList()
POST    /monitor/slncList      controllers.Application.monitorSilenceList()

GET     /monitor/slncIdx       controllers.Application.monitorSilenceIdx(ix: String, slunt: String, curl: String)

GET     /monitor/mute         controllers.Application.monitorMute(remote: String, curl: String)
GET     /monitor/unmute       controllers.Application.monitorUnmute(remote: String, curl: String)

POST    /monitor/saveStates   controllers.Application.monitorSaveStates()

GET     /proxy/:remote/*path  controllers.Application.proxy(remote: String, path: String)

GET     /inspect/:id          controllers.Application.inspect(id: String)
GET     /config/status        controllers.Application.configStatus()
GET     /run/times            controllers.Application.commandRunTimes(lmt: Int ?= 500)


# JSON response for JS UI
GET     /json/periods         controllers.Application.jsonPeriods()
GET     /json/trxtokens       controllers.Application.jsonTrxTokens(q: String ?= "", remote: Option[String])
GET     /json/rxtokens        controllers.Application.jsonRxTokens(q: String ?= "", remote: Option[String])
GET     /json/pxtokens        controllers.Application.jsonPxTokens(q: String ?= "", remote: Option[String])
GET     /json/sxtokens        controllers.Application.jsonSxTokens(q: String ?= "", remote: Option[String])
GET     /json/cmdtokens       controllers.Application.jsonCmdTokens(q: String ?= "", remote: Option[String])

# SVG response
GET     /monitor/indexSvg     controllers.Application.monitorIndexSvg(ixid: String)
GET     /api/monitor/svgData  controllers.Api.monitorSvgData()

# plugin routes
GET     /plugin/:pluginId  controllers.Application.pluginIndex(pluginId: String)
POST    /plugin/:pluginId  controllers.Application.pluginIndex(pluginId: String)

# API (json response) calls
GET     /api/config         controllers.Api.config
GET     /api/fetch/:oid     controllers.Api.fetch(oid: String, r: Option[Int], s: Option[String], e: Option[String], fnan: Option[String])
GET     /api/fetchMany      controllers.Api.fetchMany(ids: String, r: Option[Int], s: Option[String], e: Option[String], fnan: Option[String])
POST    /api/fetchMany      controllers.Api.fetchManyPost
GET     /api/fetchAgg       controllers.Api.fetchAgg(ids: String, op: String, gb: Option[String], r: Option[Int], s: Option[String], e: Option[String], fnan: Option[String])
POST    /api/fetchAgg       controllers.Api.fetchAggPost
POST    /api/reloadLocal    controllers.Api.reloadLocal
GET     /api/reloadLocal    controllers.Api.reloadLocal
POST    /api/reloadSlave/:slaveId   controllers.Api.reloadSlave(slaveId: String)
GET     /api/reloadSlave/:slaveId   controllers.Api.reloadSlave(slaveId: String)
POST    /api/graph          controllers.Api.graph
POST    /api/agg            controllers.Api.agg
GET     /api/rrd/:oid       controllers.Api.downloadRrd(oid: String)

GET     /api/monitor/states     controllers.Api.monitorStates(ms: Option[String], soft: Option[String], ackd: Option[String], slncd: Option[String])
GET     /api/monitor/silenced   controllers.Api.monitorSilenced()
GET     /api/monitor/trees      controllers.Api.monitorTrees(rx: Option[String], rxx: Option[String], ms: Option[String], soft: Option[String], ackd: Option[String], slncd: Option[String], rid: Option[String], lmt: Option[Int])
GET     /api/monitor/slncall    controllers.Api.monitorSilenceAllTrees(rx: Option[String], rxx: Option[String], ms: Option[String], soft: Option[String], ackd: Option[String], slncd: Option[String], rid: Option[String], until: Int, sticky: Option[String], stickyDesc: Option[String])
POST    /api/monitor/rmstickysl controllers.Api.removeStickySilence
GET     /api/monitor/runtree    controllers.Api.monitorRunTree(root: Option[String])
GET     /api/monitor/logs       controllers.Api.monitorLog(period: Option[String], limit: Option[Int], sev: Option[String], soft: Option[String], ackd: Option[String], slncd: Option[String], rx: Option[String], rxx: Option[String])
GET     /api/monitor/heatmap    controllers.Api.monitorHeatmap
POST    /api/monitor/heatmap    controllers.Api.monitorHeatmapPost
GET     /api/monitor/ostates    controllers.Api.monitorObjectViewsGet(ids: String)
POST    /api/monitor/ostates    controllers.Api.monitorObjectViewsPost
GET     /api/monitor/ack        controllers.Api.monitorAck(id: String)
GET     /api/monitor/unack      controllers.Api.monitorUnack(id: String)
GET     /api/monitor/slnc       controllers.Api.monitorSilence(id: String, slunt: Int)
GET     /api/monitor/unslnc     controllers.Api.monitorUnsilence(id: String)
POST    /api/monitor/ackList    controllers.Api.monitorAckList()
POST    /api/monitor/slncList   controllers.Api.monitorSilenceList()

GET     /api/monitor/mute       controllers.Api.monitorMute()
GET     /api/monitor/unmute     controllers.Api.monitorUnmute()

GET     /api/plugin/:pluginId  controllers.Api.pluginData(pluginId: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/smg/:file           controllers.Images.at(path="public/smg", file)
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

